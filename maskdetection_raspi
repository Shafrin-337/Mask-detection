
#prototxtPath = r"/home/pi/Desktop/Project32/1. Mask detection/deploy.prototxt.txt"
#weightsPath = r"/home/pi/Desktop/Project32/1. Mask detection/res10_300x300_ssd_iter_140000.caffemodel"# import the necessary packages
# import the necessary packages
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
#from imutils.video import VideoStream
import numpy as np
import imutils
import time
import cv2
import RPi.GPIO as GPIO


def detect_and_predict_mask(frame, faceNet, maskNet):
    (h, w) = frame.shape[:2]
    blob = cv2.dnn.blobFromImage(frame, 1.0, (224, 224),
        (104.0, 177.0, 123.0))
    faceNet.setInput(blob)
    detections = faceNet.forward()
    print(detections.shape)
    faces = []
    locs = []
    preds = []
    
    for i in range(0, detections.shape[2]):
        confidence = detections[0, 0, i, 2]
        if confidence > 0.5:
            
            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
            (startX, startY, endX, endY) = box.astype("int")

            (startX, startY) = (max(0, startX), max(0, startY))
            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))

            face = frame[startY:endY, startX:endX]
            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)
            face = cv2.resize(face, (224, 224))
            face = img_to_array(face)
            face = preprocess_input(face)

            # add the face and bounding boxes to their respective
            # lists
            faces.append(face)
            locs.append((startX, startY, endX, endY))

    # only make a predictions if at least one face was detected
    if len(faces) > 0:
        # for faster inference we'll make batch predictions on *all*
        # faces at the same time rather than one-by-one predictions
        # in the above `for` loop
        faces = np.array(faces, dtype="float32")
        preds = maskNet.predict(faces, batch_size=32)

    # return a 2-tuple of the face locations and their corresponding
    # locations
    return (locs, preds)


GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(11,GPIO.OUT)
GPIO.setup(40,GPIO.OUT)
GPIO.output(40,True)


prototxtPath = r"/home/pi/Desktop/Project32/1. Mask detection/deploy.prototxt.txt"
weightsPath = r"/home/pi/Desktop/Project32/1. Mask detection/res10_300x300_ssd_iter_140000.caffemodel"# import the necessary packages

faceNet = cv2.dnn.readNet(prototxtPath, weightsPath)
maskNet = load_model("mask_detector.model")

# initialize the video stream
print("[INFO] Checking...")

cap=cv2.VideoCapture(0)
img_count=1
while True:
    ret, frame1=cap.read()
    if not ret:
        print('Failed to take face image!')
        break
    cv2.imshow('img',frame1)
    key=cv2.waitKey(1)
    if key==ord('q'):
        break
    elif key%256==32:
        img_name="myImage_{}.png".format(img_count)
        cv2.imwrite(img_name,frame1)
        print("Face image captured")
        
        break
cap.release()

frame = cv2.imread(img_name)
frame = imutils.resize(frame, width=400)
(locs, preds) = detect_and_predict_mask(frame, faceNet, maskNet)
for (box, pred) in zip(locs, preds):
    (startX, startY, endX, endY) = box
    (mask, withoutMask) = pred
    label = "Mask" if mask > withoutMask else "No Mask"
    if label == "Mask":
        GPIO.output(40,False)
        color = (0, 255, 0)
        print('Welcome to the classroom')
        
        GPIO.setup(38,GPIO.OUT)
        GPIO.output(38,True)
        servo1=GPIO.PWM(11,40)
        servo1.start(0)
        servo1.ChangeDutyCycle(7)
        time.sleep(2)
        servo1.ChangeDutyCycle(2)
        time.sleep(0.5)
        servo1.ChangeDutyCycle(0)
        servo1.stop()
    else :
        GPIO.output(40,False)
        color=(0, 0, 255)           
        print('Please put on your mask')
        GPIO.setup(36,GPIO.OUT)
        GPIO.output(36,True)
        time.sleep(2)

    

GPIO.cleanup()
print('Goodbye')
cv2.destroyAllWindows()


